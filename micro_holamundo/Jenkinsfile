pipeline {
    agent any
    
    tools {
        gradle 'Gradle 7.5.1' 
        //dockerTool 'Docker 20.10.21' 
     }
   
    stages {
       
        stage('Build') {
            steps {
                 checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Taranator0813/Proyecto_Semilleros.git']])
                script{
                 sh """
                    ls -la
                    cd micro_holamundo
                    ls -la
                    pwd
                    gradle init
                    gradle build
                    """
                }
            }
        }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////       
        
       stage('Test SonarQube') {
           steps {
              script{
                
                withSonarQubeEnv('Sonar') {
                    sh """
                    cd micro_holamundo
                    ls -la

                    gradle sonarqube \
                    -Dsonar.projectKey=Sonar \
                    -Dsonar.host.url=http://192.168.7.153:9000 \
                    -Dsonar.login=4c3db594f62b17cecbaf5aa62ed22a48f6acf1e7
                   """
                    }
                }     
            }
        }
        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        stage('Build and Push Docker Image') {
            agent {
               label "slave"
            } 
            steps {
                script {
                    def dockerImage = "estefaniam/micro_holamundo:build-${BUILD_NUMBER}"
                    sh"""
                    cd micro_holamundo
                    sudo docker version
                    java --version
                    
                    sudo docker login -u estefaniam -p dckr_pat_Mcue9uG-rCjdzWfAD9WfcQJu3Sw
                    sudo docker build -t ${dockerImage} .
                    sudo docker push ${dockerImage}
                    """
                    echo '---------------------image succesfull in dockerHub----------------------------'
                }
            }
        }
        
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
        stage('Deployment') {
            steps {
                script{
                sh """
                az login --service-principal --username 2d721c5d-feae-41c7-a45a-ac923780104a --password yga8Q~gCRhayv9xO0f55Pb996MbCIReGZWQJ9dsX --tenant c5ad2df2-752b-4501-9b44-db6c637f5221
                az account set --subscription af4e92ac-7566-4412-8a79-e11fc3a89f24
                az aks get-credentials --resource-group Proyecto_DevOps --name stack_Banc_Pop2504-k8s
                cd micro_holamundo/k8s
                ls -la 
                kubectl apply -f ms-rest.yaml
                """
                }
                echo 'succesfull'
            }
        }
        
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//         stage('Execute JMeter') {
//            steps {
//                 script{
//                sh """
//                 c:\\Users\\emunozpe\\Desktop\\apache-jmeter-5.5\\bin\\jmeter.bat -n -t "micro_holamundo\\Test_Plans\\PetStore-End-to-End-Flow.jmx" -p "micro_holamundo\\Test_Plans\\data\\PetStore_LoadTest.properties"
//                 """
//                }
//            
//            }
//        }
     
//         stage('Execute JMeter') {
//            agent {
//               label "slave"
//            } 
//            steps {
//                script {
//                    sh"""
//                     pwd
//                     cd ..
//                     cd ..
//                     ls -la
//                     cd apache-jmeter-5.5/bin/
//                    ./jmeter --version
//                    """
               
//                }
//            }
//        }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//        stage('JMeter') {
//            agent {
//               label "slave"
//            } 
//            steps {
//                script {
//                    sh"""
//                    pwd
//                    cd ..
//                    cd ..
//                    ls -la
//                    cd apache-jmeter-5.5/bin/
//                    pwd
//                    ls -la
//                    ./jmeter.sh -n -t ./pruebaJenkins.jmx -l ./resultado.xml
//                   """
                     //./jmeter.sh -n -t ./PetStore-End-to-End-Flow.jmx -p ./PetStore_LoadTest.properties -l MyRun1.xml
                   
//                }
//            }
//        }
        
//      stage('Publish Report') {
//            agent {
//               label "slave"
//            } 
//            steps {
                //sh"""
                //pwd
                //cd ..
                //cd ..
                //ls -la
                //cd apache-jmeter-5.5/bin/
                //pwd
                //ls -la
                //perfReport filterRegex: '', sourceDataFiles: 'resultado.xml'
                //"""
//                perfReport filterRegex: '', sourceDataFiles: '**/*.xml'
//            }
//        }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stage('Postman API Tests') {
//            agent {
//               label "slave"
//            } 
//            steps {
//                script {
//                
//                def newmanExitCode = sh(script: "newman run JSON_Postman/SmokeTest.postman_collection.json", returnStatus: true)
//                echo "status " + newmanExitCode
//                if (newmanExitCode != 0) {
//                  sh "sudo docker tag estefaniam/micro_holamundo:build-${BUILD_NUMBER} estefaniam/micro_holamundo:build-${BUILD_NUMBER}-rollback"
//                  sh "sudo docker push estefaniam/micro_holamundo:build-${BUILD_NUMBER}-rollback"
//             
//                    error "¡Falló la prueba de API con Newman! Código de salida " + newmanExitCode
//
//                }
//                else{
//                    echo "¡Prueba de API con Newman exitosa! Código de salida " + newmanExitCode
//                }
//                    
//                }
//            }
//        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stage('Postman API Tests') {
            agent {
               label "slave"
            } 
            steps {
                script {
                
                def newmanExitCode = sh(script: "newman run micro_holamundo/JSON_Postman/SmokeTest.postman_collection.json", returnStatus: true)
                echo "status " + newmanExitCode
                if (newmanExitCode != 0) {
                    node('Azure'){
                              sh """
                az login --service-principal --username 2d721c5d-feae-41c7-a45a-ac923780104a --password yga8Q~gCRhayv9xO0f55Pb996MbCIReGZWQJ9dsX --tenant c5ad2df2-752b-4501-9b44-db6c637f5221
                az account set --subscription af4e92ac-7566-4412-8a79-e11fc3a89f24
                az aks get-credentials --resource-group Proyecto_DevOps --name stack_Banc_Pop2504-k8s
                cd micro_holamundo/k8s
                ls -la 
                kubectl set image deployment/ms-rest ms-rest=estefaniam/micro_holamundo:build-${BUILD_NUMBER-1}
                """
                    }
              

                    
             
               
                error "¡Falló la prueba de API con Newman! Código de salida " + newmanExitCode

                }
                else{
                    echo "¡Prueba de API con Newman exitosa! Código de salida " + newmanExitCode
                }
                    
                }
            }
        }  

         stage('Execute JMeter') {
            agent {
               label "slave"
            } 
            steps {
                script {
                    sh"""
                     pwd
                     cd ..
                     cd ..
                     ls -la
                     cd apache-jmeter-5.3/bin/
                    ./jmeter --version
                    """
               
                }
            }
        }



        
        
     
        
      
        
        
       
        
        
        
        
        
        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
}
